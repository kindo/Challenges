def pacificAtlantic(heights):
     
  
  def checkNeigh(i , j, A, h, Tv):

      if Tv[i][j] == True:
          return A[i][j]
      Tv[i][j] = True
      
      if (i > 0) and (A[i][j] != 1):
          if h[i][j] >= h[i-1][j]:
              A[i][j] = checkNeigh(i - 1, j, A, h, Tv)
              
      if (j > 0)and (A[i][j] != 1):
          if h[i][j] >= h[i][j-1]:
              A[i][j] = checkNeigh(i, j-1, A, h, Tv)

      if (i <= len(A) - 2) and (A[i][j] != 1):
          if  h[i][j] >= h[i+1][j]:
              A[i][j] = checkNeigh(i+1, j, A, h, Tv)

      if (j <= len(A[0]) - 2) and (A[i][j] != 1):
          if  h[i][j] >= h[i][j+1]:
              A[i][j] = checkNeigh(i, j+1, A, h, Tv)

      if A[i][j] == 0:
          Tv[i][j] = False
      return A[i][j]

  r = len(heights)
  c = len(heights[0])

  dp = [[0] * (c) for _ in range(r)]
  dp[0] = [1] * (c)
  for i in range(r): dp[i][0] = 1;

  da = [[0] * (c) for _ in range(r)]
  da[-1] = [1] * (c)
  for i in range(r): da[i][-1] = 1;

  Tv = [[False] * (c) for _ in range(r)];
  Tv[0] = [True] * (c)
  for i in range(r): Tv[i][0] = True;

  Tv1 = [[False] * (c) for _ in range(r)];
  Tv1[-1] = [True] * (c)
  for i in range(r): Tv1[i][-1] = True;
  res = []

  for i in range(0, r):
      for j in range(0, c):
      
        checkNeigh(i, j, dp, heights, Tv)
        checkNeigh(i,j, da, heights, Tv1)
        if dp[i][j] == 1 and da[i][j] == 1:
            res.append([i, j])     
  return res
